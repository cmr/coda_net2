// generated by generate_methodidx; DO NOT EDIT

package main

import (
	"encoding/json"
	"fmt"
)

var (
	_methodIdxNameToValue = map[string]methodIdx{
		"configure":          configure,
		"listen":             listen,
		"publish":            publish,
		"subscribe":          subscribe,
		"unsubscribe":        unsubscribe,
		"registerValidator":  registerValidator,
		"validationComplete": validationComplete,
		"closePipe":          closePipe,
		"sendPipe":           sendPipe,
	}

	_methodIdxValueToName = map[methodIdx]string{
		configure:          "configure",
		listen:             "listen",
		publish:            "publish",
		subscribe:          "subscribe",
		unsubscribe:        "unsubscribe",
		registerValidator:  "registerValidator",
		validationComplete: "validationComplete",
		closePipe:          "closePipe",
		sendPipe:           "sendPipe",
	}
)

func init() {
	var v methodIdx
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_methodIdxNameToValue = map[string]methodIdx{
			interface{}(configure).(fmt.Stringer).String():          configure,
			interface{}(listen).(fmt.Stringer).String():             listen,
			interface{}(publish).(fmt.Stringer).String():            publish,
			interface{}(subscribe).(fmt.Stringer).String():          subscribe,
			interface{}(unsubscribe).(fmt.Stringer).String():        unsubscribe,
			interface{}(registerValidator).(fmt.Stringer).String():  registerValidator,
			interface{}(validationComplete).(fmt.Stringer).String(): validationComplete,
			interface{}(closePipe).(fmt.Stringer).String():          closePipe,
			interface{}(sendPipe).(fmt.Stringer).String():           sendPipe,
		}
	}
}

// MarshalJSON is generated so methodIdx satisfies json.Marshaler.
func (r methodIdx) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _methodIdxValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid methodIdx: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so methodIdx satisfies json.Unmarshaler.
func (r *methodIdx) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("methodIdx should be a string, got %s", data)
	}
	v, ok := _methodIdxNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid methodIdx %q", s)
	}
	*r = v
	return nil
}
